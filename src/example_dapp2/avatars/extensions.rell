@extend(yours.populate_metadata)
function populate_metadata(yours.token, modules: set<name>): map<text, gtv>? {
  if (not modules.contains("pudgy")) return null;
  val metadata = map<text, gtv>();

  if (token.collection.name == PUDGY_PENGUIN_COLLECTION) {
    val avatar = avatar @ { token };
    metadata.put("Fishes Caught", avatar.fishes_caught.to_gtv());
    val equipped_fishing_rod = equipped_fishing_rod @? { .avatar.token == token };
    if (equipped_fishing_rod != null) {
      metadata.put("Fishing Rod", equipped_fishing_rod.fishing_rod.token.name.to_gtv());
    }
  } else if (token.collection.name == FISHING_ROD_COLLECTION) {
    val fishing_rod = fishing_rod @ { token };
    metadata.put("Durability", fishing_rod.durability.to_gtv());
    val equipped_fishing_rod = equipped_fishing_rod @? { .fishing_rod.token == token };
    if (equipped_fishing_rod != null) {
      metadata.put("Equipped by", equipped_fishing_rod.avatar.token.name.to_gtv());
    }
  }

  return metadata;
}

@extend(yours.after_apply_transfer)
function after_apply_transfer(yours.token, modules: set<name>, attributes: map<text, gtv>) {
  if (token.collection.project.name != IGLOO_PROJECT) return;
  yours.attach_module(token, "pudgy");

  if (token.collection.name == PUDGY_PENGUIN_COLLECTION) {
    if (avatar @? { token } != null) return;
    create avatar ( token, fishes_caught = 0 );
  } else if (token.collection.name == FISHING_ROD_COLLECTION) {
    if (fishing_rod @? { token } != null) return;
    create fishing_rod ( token, durability = 100 );
  }
}

@extend(yours.before_init_transfer)
function before_init_transfer(yours.token, ft4.accounts.account) {
  // Unequip if either the pudgy penguin or the fishing rod is being transferred
  require(
    equipped_fishing_rod @? {
      .avatar.token == token or
    .fishing_rod.token == token
    } == null,
    "Cannot transfer an equipped item"
  );
}
