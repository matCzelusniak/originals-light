function add_attribute_to_asset(
  ft_accounts.account,
  attribute: attribute_dto
) {
  val asset = ft_assets.Asset(attribute.asset_id);

  before_add_attribute_to_asset(
    asset,
    attribute.name,
    attribute.type,
    attribute.value
  );

  when (attribute.type) {
    attribute_type.boolean,
    attribute_type.byte_array,
    attribute_type.decimal,
    attribute_type.integer,
    attribute_type.big_integer,
    attribute_type.text
     -> {
      create attribute(
        asset,
        name = attribute.name,
        value = attribute.value,
        type = attribute.type
      );
    } attribute_type.asset_id-> {
      link_assets(asset, attribute.value, account, attribute.amount);
      create attribute(
        asset,
        name = attribute.name,
        value = attribute.value,
        type = attribute.type
      );
    } 
    else -> {
      require(false, "Unsupported attribute type");
    }
  }

  after_add_attribute_to_asset(
    asset,
    attribute.name,
    attribute.type,
    attribute.value
  );
}

function update_attribute(
  asset_id: byte_array,
  attribute_name: text,
  attribute_value: byte_array
) {
  before_update_attribute(
    asset_id,
    attribute_name,
    attribute_value
  );
  update attribute @ { .name == attribute_name, .asset.id == asset_id } ( value = attribute_value );

  after_update_attribute(
    asset_id,
    attribute_name,
    attribute_value
  );
}

function require_asset_ownership(
  ft_accounts.account,
  ft_assets.asset,
  amount: big_integer = 1L
) {
  val main_account_balance_amount = ft_assets.get_asset_balance(account, asset);
  val special_account_balance_amount = ft_assets_locking.get_locked_asset_aggregated_balance(account, asset, [LINKED]);

  require(
      main_account_balance_amount >= amount or special_account_balance_amount >= amount,
      "Account with id '%s' does not own the asset with id '%s' and balance '%d'"
      .format(account.id, asset.id, amount)
  );
}

function link_assets(
  parent_asset: ft_assets.asset,
  child_asset_id: byte_array,
  ft_accounts.account,
  amount: big_integer = 1L
) {
  val child_asset = ft_assets.Asset(child_asset_id);
  require_asset_ownership(account, parent_asset);
  require_asset_ownership(account, child_asset, amount);

  ft_assets_locking.lock_asset(
    LINKED,
    account,
    child_asset,
    amount
  );
}


// Todo create an operation to unlink linked assets -> Ensure it deletes the created attribute
function unlink_assets(
  parent_asset: ft_assets.asset,
  child_asset_id: byte_array,
  ft_accounts.account,
  amount: big_integer = 1L
) {
  val child_asset = ft_assets.Asset(child_asset_id);

  require_asset_ownership(account, parent_asset);
  require_asset_ownership(account, child_asset, amount);

  ft_assets_locking.unlock_asset(
    LINKED,
    account,
    child_asset,
    amount
  );
}

function get_asset_attributes(asset_id: byte_array): list<attribute> {
  return attribute @* { .asset.id == asset_id };
}
