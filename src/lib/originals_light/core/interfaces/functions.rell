function register_interface(
  name: text,
  attributes: list<(
    name: text,
    type: attributes.attribute_type
  )>
) {
  interface @* {} ( @sort_desc .id ) limit 1;

  val last_id = (interface @* {} ( @sort_desc .id ) limit 1 );
  val next_id = if (last_id.size() > 0) last_id[0] + 1 else 1;

  val interface_created = create interface(
    id = next_id,
    name = name
  );

  for(attribute in attributes){
    create interface_attributes(
      interface = interface_created,
      attribute_name = attribute.name,
      type = attribute.type
    );
  }
}

function add_interface_to_asset(
  asset_id: byte_array,
  interface_id: big_integer
) {
  val interface = interface @ { .id == interface_id };

  require_interface_compatibility(
    attributes.get_asset_attributes(asset_id) @* {} (
      attributes.basic_attribute_dto(
        name = $.name,
        type = $.type,
        value = $.value
      )
    ),
    interface
  );

  create asset_interfaces(
    asset = ft_assets.Asset(asset_id),
    interface = interface @ { .id == interface_id }
  );
}