function register_asset(
  ft_accounts.account,
  name,
  symbol: text,
  decimals: integer,
  blockchain_rid: byte_array,
  icon_url: text,
  type: text = ft_assets.ASSET_TYPE_FT4,
  asset_attributes: list<(
    attribute_name: text,
    type: attributes.attribute_type,
    attribute_value: byte_array
  )>?
): ft_assets.asset {
  before_register_asset(
    name,
    symbol,
    decimals,
    blockchain_rid,
    icon_url,
    type,
    asset_attributes
  );

  val asset = ft_assets.Unsafe.register_asset(
    name = name,
    symbol = symbol,
    decimals = 0,
    blockchain_rid = chain_context.blockchain_rid,
    icon_url = icon_url,
    type = type
  );

  after_register_asset(
    asset,
    asset_attributes
  );

  return asset;
}

function mint_asset(
  asset_id: byte_array,
  amount: big_integer,
  accounts: list<byte_array>?
) {
  before_mint(
    asset_id,
    amount,
    accounts
  );
  val accounts_list = list<ft_accounts.account>();
  if (not empty(accounts)) {
    for (id in accounts) {
      accounts_list.add(ft_accounts.Account(id));
    }
  }

  val asset = ft_assets.Asset(asset_id);

  for(account in accounts_list) {
    ft_assets.Unsafe.mint(
      account,
      asset,
      amount
    );
  }

  after_mint(
    asset
  );
}

function get_related_assets(id: byte_array) {
  val children = get_children(id);

  val grandchildren = list<byte_array>();
  grandchildren.add_all(children);

  while (not empty(children)) {
    print("===>Child id", children[0]);
    print("===>Grand children ids", get_children(children[0]));
    grandchildren.add_all(
      get_children(children[0])
    );

    children.remove(children[0]);
  }

  print("=======>Children", grandchildren);
  return grandchildren;
}

function get_children(id: byte_array) {
    return (fta: ft_assets.asset, att: attributes.attribute) @* {
        fta == att.asset,
        fta.id == id,
        att.type == attributes.attribute_type.asset_id
    } (att.value);
}
