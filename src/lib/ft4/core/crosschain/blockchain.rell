import ^.assets;
import ^.accounts;

val ACCOUNT_TYPE_BLOCKCHAIN = "FT4_BLOCKCHAIN";

entity asset_origin {
   key assets.asset;
   origin_blockchain_rid: byte_array;
}

function is_blockchain(account_id: byte_array): boolean {
   return accounts.account @? { .id == account_id, .type == ACCOUNT_TYPE_BLOCKCHAIN }??;
}

function ensure_blockchain_account(blockchain_rid: byte_array) =
   accounts.ensure_account_without_auth(blockchain_rid, ACCOUNT_TYPE_BLOCKCHAIN);

namespace Unsafe {
    function register_crosschain_asset(
        asset_id: byte_array,
        name,
        symbol: text,
        decimals: integer,
        issuing_blockchain_rid: byte_array,
        icon_url: text,
        type: text,        
        uniqueness_resolver: byte_array,
        origin_blockchain_rid: byte_array
    ): asset_origin {
        utils.validate_blockchain_rid(origin_blockchain_rid, "origin_blockchain_rid");
        utils.validate_blockchain_rid(issuing_blockchain_rid, "issuing_blockchain_rid");
        assets.validate_asset_id(asset_id);
        assets.validate_asset_decimals(decimals);
        assets.validate_asset_name(name);
        assets.validate_asset_symbol(symbol);
        assets.validate_asset_type(type);
        assets.validate_asset_uniqueness_resolver(uniqueness_resolver);

        require(
            chain_context.blockchain_rid != origin_blockchain_rid,
            "Asset origin cannot be the current chain."
        );
        require(
            chain_context.blockchain_rid != issuing_blockchain_rid,
            "Cannot register an asset that originated on this chain as a crosschain asset."
        );

        
        val asset = create assets.asset(
            id = asset_id,
            name,
            symbol,
            decimals,
            issuing_blockchain_rid,
            icon_url = assets.parse_icon_url(icon_url),
            type = type,
            total_supply = 0L,
            uniqueness_resolver
        );
        return create asset_origin(asset, origin_blockchain_rid);
    }
}
