val MAX_PAGE_SIZE = 100;

function encode_cursor(page_cursor) = page_cursor.to_bytes().to_base64();

function encode_cursor_with_instanceid(page_cursor_instance_id) = page_cursor_instance_id.to_bytes().to_base64();

function decode_cursor(cursor: text) = page_cursor.from_bytes(byte_array.from_base64(cursor));

function decode_cursor_with_instance_id(cursor: text) = page_cursor_instance_id.from_bytes(byte_array.from_base64(cursor));

function page_size(page_cursor) = min(MAX_PAGE_SIZE, page_cursor.page_size);

function page_size_with_instance_rowid(page_cursor_instance_id) = min(MAX_PAGE_SIZE, page_cursor_instance_id.page_size);

function fetch_data_size(page_cursor) = page_size(page_cursor) + 1;

function query_offset_for_page_size(page_cursor) = page_size(page_cursor) * (get_current_page(page_cursor) - 1);

function get_current_page(page_cursor) =
    if(page_cursor.after_page == null or page_cursor.after_page!! <= 0) 
        1
    else
        page_cursor.after_page!!;

function null_page() = paged_result(
    next_cursor = null,
    data = list<gtv>()
);

function make_page(pagination_results: list<pagination_result>, cursor: page_cursor): paged_result {
    if(empty(pagination_results)) {
         return null_page();
    }

    if (pagination_results.size() < fetch_data_size(cursor)) {
        return paged_result(
            next_cursor = null,
            data = pagination_results  @* {} .data
        );
    }

    val response_data = pagination_results.sub(0, pagination_results.size()-1);

    val last_id = response_data[response_data.size()-1].rowid;
    val next_cursor = page_cursor(
        page_size = cursor.page_size,
        last_id
    );

    return paged_result(
        next_cursor = encode_cursor(next_cursor),
        data = response_data  @* {} .data
    );
}

function make_page_by_page_size(pagination_results: list<pagination_result>, cursor: page_cursor): paged_result {
    if(empty(pagination_results)) {
         return null_page();
    }

    if (pagination_results.size() < fetch_data_size(cursor)) {
        return paged_result(
            next_cursor = null,
            data = pagination_results  @* {} .data
        );
    }

    val response_data = pagination_results.sub(0, pagination_results.size()-1);

    val next_cursor = page_cursor(
        page_size = cursor.page_size,
        after_page = get_current_page(cursor) + 1
    );

    return paged_result(
        next_cursor = encode_cursor(next_cursor),
        data = response_data  @* {} .data
    );
}

function make_page_by_instance_id(pagination_results: list<pagination_result_with_instance_id>, cursor: page_cursor_instance_id): paged_result {
    if(empty(pagination_results)) {
         return paged_result(
            next_cursor = null,
            data = list<gtv>()
         );
    }

    if(pagination_results.size() < page_size_with_instance_rowid(cursor) + 1) {
        return paged_result(
            next_cursor = null,
            data = pagination_results  @* {} .data
        );
    }

    val paginated_result = pagination_results.sub(0, pagination_results.size()-1);
    val next_cursor = page_cursor_instance_id(
        cursor.page_size,
        instance_rowid = pagination_results[pagination_results.size()-2].instance_rowid,
        prototype_rowid = pagination_results[pagination_results.size()-2].prototype_rowid
    );
    
    return paged_result(
        next_cursor = encode_cursor_with_instanceid(next_cursor),
        data = paginated_result  @* {} .data
    );

}