function test_battle_of_2_heroes() {
    val admin = common_test_helpers.register_admin();

    originals_light_interfaces_ext.register_interface(
        "hero",
        [
            (
                attribute_name = "strength",
                type = originals_light_attributes.attribute_type.big_integer
            ),
            (
                attribute_name = "agility",
                type = originals_light_attributes.attribute_type.big_integer
            ),
            (
                attribute_name = "intelligence",
                type = originals_light_attributes.attribute_type.big_integer
            ),
            (
                attribute_name = "durability",
                type = originals_light_attributes.attribute_type.big_integer
            )
        ]
    ).run();

    val interface_id = originals_light_interfaces.interface @ {.name == "hero"}.id;

    game_assets_external.set_current_version_of_hero_interface_id(interface_id).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_asset_hero(
            "hero_1",
            "HERO_1",
            0,
            chain_context.blockchain_rid,
            "https://example.com/hero_1.png",
            "ft4",
            [
                (
                    attribute_name = "strength",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(10).to_bytes()
                ),
                (
                    attribute_name = "agility",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(11).to_bytes()
                ),
                (
                    attribute_name = "intelligence",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(12).to_bytes()
                ),
                (
                    attribute_name = "durability",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(13).to_bytes()
                )
            ]
        )
    )
        .run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_asset_hero(
            "hero_2",
            "HERO_2",
            0,
            chain_context.blockchain_rid,
            "https://example.com/hero_2.png",
            "ft4",
            [
                (
                    attribute_name = "strength",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(11).to_bytes()
                ),
                (
                    attribute_name = "agility",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(12).to_bytes()
                ),
                (
                    attribute_name = "intelligence",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(13).to_bytes()
                ),
                (
                    attribute_name = "durability",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(14).to_bytes()
                )
            ]
        )
    )
        .run();

    originals_light_interfaces_ext.register_interface(
        "arena",
        [
            (
                attribute_name = "height",
                type = originals_light_attributes.attribute_type.big_integer
            ),
            (
                attribute_name = "width",
                type = originals_light_attributes.attribute_type.big_integer
            ),
            (
                attribute_name = "image",
                type = originals_light_attributes.attribute_type.text
            )
        ]
    ).run();

    val interface_arena_id = originals_light_interfaces.interface @ {.name == "arena"}.id;
    game_assets_external.set_current_version_of_battle_arena_interface_id(interface_arena_id).run();
    
    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_asset_battle_arena(
            "battle_arena_madrid",
            "BATTLE",
            0,
            chain_context.blockchain_rid,
            "https://example.com/battle_arena.png",
            [
                (
                    attribute_name = "height",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(100).to_bytes()
                ),
                (
                    attribute_name = "width",
                    type = originals_light_attributes.attribute_type.big_integer,
                    attribute_value = big_integer(100).to_bytes()
                ),
                (
                    attribute_name = "image",
                    type = originals_light_attributes.attribute_type.text,
                    attribute_value = "https://example.com/battle_arena.png".to_bytes()
                )
            ]
        )
    )
        .run();

    val battle_arena_madrid_id = ft_assets.asset @{.name == "battle_arena_madrid"}.id;

    originals_light_interfaces_ext.register_interface(
        "battle",
        [
            (
                attribute_name = "winner_id",
                type = originals_light_attributes.attribute_type.byte_array
            ),
            (
                attribute_name = "battle_arena_id",
                type = originals_light_attributes.attribute_type.byte_array
            ),
            (
                attribute_name = "timestamp_start",
                type = originals_light_attributes.attribute_type.big_integer
            ),
            (
                attribute_name = "timestamp_end",
                type = originals_light_attributes.attribute_type.big_integer
            )
        ]
    ).run();

    val interface_battle_id = originals_light_interfaces.interface @ {.name == "battle"}.id;
    game_external.set_current_version_of_battle_interface_id(interface_battle_id).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_external.register_and_mint_asset_battle(
        "battle_1",
        "BATTLE_1",
        0,
        chain_context.blockchain_rid,
        "https://example.com/battle_1.png",
        [
            (
                attribute_name = "winner_id",
                type = originals_light_attributes.attribute_type.byte_array,
                attribute_value = x"00"
            ),
            (
                attribute_name = "battle_arena_id",
                type = originals_light_attributes.attribute_type.byte_array,
                attribute_value = battle_arena_madrid_id
            ),
            (
                attribute_name = "timestamp_start",
                type = originals_light_attributes.attribute_type.big_integer,
                attribute_value = big_integer(1724660646).to_bytes()
            ),
                        (
                attribute_name = "timestamp_end",
                type = originals_light_attributes.attribute_type.big_integer,
                attribute_value = big_integer(0).to_bytes()
            )
        ]
        )
    )
        .run();

    val battle_1_id = ft_assets.asset @{.name == "battle_1"}.id;
    print("battle_1_id: ", battle_1_id);
    //todo matCzelusniak consider to change to add operation for update multiple attributes.
    originals_light_attributes_ext.update_attribute(
        battle_1_id,
        "winner_id",
        admin.account_id
    ).run();

    originals_light_attributes_ext.update_attribute(
        battle_1_id,
        "timestamp_end",
        big_integer(1724661646).to_bytes()
    ).run();
}

function test_link_equipment_to_hero() {
    val admin = common_test_helpers.register_admin();

    originals_light_interfaces_ext.register_interface(
        "helmet",
        [
            (
                attribute_name = "power",
                type = originals_light_attributes.attribute_type.integer
            )
        ]
    ).run();

    val helmet_interface_id = originals_light_interfaces.interface @ {.name == "helmet"}.id;

    game_assets_external.set_current_version_of_equipment_interface_id(helmet_interface_id).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_hero_equipment(
            name = "helmet 1",
            symbol = "HELMET_1",
            decimals = 0,
            blockchain_rid = chain_context.blockchain_rid,
            icon_url = "https://example.com/helmet.png",
            type = "ft4",
            attributes = [
                (
                    attribute_name = "power",
                    type = originals_light_attributes.attribute_type.integer,
                    attribute_value = (5).to_gtv().to_bytes()
                )
            ]
        )
    )
        .run();

    val helmet_asset_id = ft_assets.asset @ {} (.id, @omit @sort_desc .rowid) limit 1;

    originals_light_interfaces_ext.register_interface(
        "hero",
        [
            (
                attribute_name = "equipment",
                type = originals_light_attributes.attribute_type.asset_id
            )
        ]
    )
        .run();

    val hero_interface_id = originals_light_interfaces.interface @ {.name == "hero"}.id;

    game_assets_external.set_current_version_of_hero_interface_id(hero_interface_id).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_asset_hero(
            name = "hero_1",
            symbol = "HERO_1",
            decimals = 0,
            blockchain_rid = chain_context.blockchain_rid,
            icon_url = "https://example.com/hero_1.png",
            type = "ft4",
            attributes = [
                (
                    attribute_name = "equipment",
                    type = originals_light_attributes.attribute_type.asset_id,
                    attribute_value = helmet_asset_id
                )
            ]
        )
    )
        .run();

    val hero_asset_id = ft_assets.asset @ {} (.id, @omit @sort_desc .rowid) limit 1;
    val hero_children = originals_light_attributes_ext.get_linked_assets(hero_asset_id);

    assert_equals(hero_children, [helmet_asset_id]);
}

function test_link_two_equipments_to_hero() {
    val admin = common_test_helpers.register_admin();

    originals_light_interfaces_ext.register_interface(
        "helmet",
        [
            (
                attribute_name = "power",
                type = originals_light_attributes.attribute_type.integer
            )
        ]
    ).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_hero_equipment(
            name = "helmet 1",
            symbol = "HELMET_1",
            decimals = 0,
            blockchain_rid = chain_context.blockchain_rid,
            icon_url = "https://example.com/helmet_1.png",
            type = "ft4",
            attributes = [
                (
                    attribute_name = "power",
                    type = originals_light_attributes.attribute_type.integer,
                    attribute_value = (5).to_gtv().to_bytes()
                )
            ]
        )
    )
        .run();

    val helmet_asset_id = ft_assets.asset @ {} (.id, @omit @sort_desc .rowid) limit 1;

    originals_light_interfaces_ext.register_interface(
        "sword",
        [
            (
                attribute_name = "strength",
                type = originals_light_attributes.attribute_type.integer
            )
        ]
    ).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_hero_equipment(
            name = "sword 1",
            symbol = "SWORD_1",
            decimals = 0,
            blockchain_rid = chain_context.blockchain_rid,
            icon_url = "https://example.com/sword_1.png",
            type = "ft4",
            attributes = [
                (
                    attribute_name = "sword",
                    type = originals_light_attributes.attribute_type.integer,
                    attribute_value = (5).to_gtv().to_bytes()
                )
            ]
        )
    )
        .run();

    val sword_asset_id = ft_assets.asset @ {} (.id, @omit @sort_desc .rowid) limit 1;

    originals_light_interfaces_ext.register_interface(
        "hero",
        [
            (
                attribute_name = "helmet",
                type = originals_light_attributes.attribute_type.asset_id
            ),
            (
                attribute_name = "sword",
                type = originals_light_attributes.attribute_type.asset_id
            )
        ]
    )
        .run();

    val interface_id = originals_light_interfaces.interface @ {.name == "hero"}.id;

    game_assets_external.set_current_version_of_hero_interface_id(interface_id).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_asset_hero(
            name = "hero_1",
            symbol = "HERO_1",
            decimals = 0,
            blockchain_rid = chain_context.blockchain_rid,
            icon_url = "https://example.com/hero_1.png",
            type = "ft4",
            attributes = [
                (
                    attribute_name = "helmet",
                    type = originals_light_attributes.attribute_type.asset_id,
                    attribute_value = helmet_asset_id
                ),
                (
                    attribute_name = "sword",
                    type = originals_light_attributes.attribute_type.asset_id,
                    attribute_value = sword_asset_id
                )
            ]
        )
    )
        .run();

    val hero_asset_id = ft_assets.asset @ {} (.id, @omit @sort_desc .rowid) limit 1;
    val hero_children = originals_light_attributes_ext.get_linked_assets(hero_asset_id);

    assert_equals(hero_children, [helmet_asset_id, sword_asset_id]);
}

function test_link_attachment_to_linked_equipment() {
    val admin = common_test_helpers.register_admin();

    originals_light_interfaces_ext.register_interface(
        "gem",
        [
            (
                attribute_name = "gem",
                type = originals_light_attributes.attribute_type.integer
            )
        ]
    ).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_hero_equipment(
            name = "gem 1",
            symbol = "GEM_1",
            decimals = 0,
            blockchain_rid = chain_context.blockchain_rid,
            icon_url = "https://example.com/gem_1.png",
            type = "ft4",
            attributes = [
                (
                    attribute_name = "gem",
                    type = originals_light_attributes.attribute_type.integer,
                    attribute_value = (1).to_gtv().to_bytes()
                )
            ]
        )
    )
        .run();

    val gem_asset_id = ft_assets.asset @ {} (.id, @omit @sort_desc .rowid) limit 1;

    originals_light_interfaces_ext.register_interface(
        "helmet",
        [
            (
                attribute_name = "power",
                type = originals_light_attributes.attribute_type.asset_id
            )
        ]
    ).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_hero_equipment(
            name = "helmet 1",
            symbol = "HELMET_1",
            decimals = 0,
            blockchain_rid = chain_context.blockchain_rid,
            icon_url = "https://example.com/sword_1.png",
            type = "ft4",
            attributes = [
                (
                    attribute_name = "power",
                    type = originals_light_attributes.attribute_type.asset_id,
                    attribute_value = gem_asset_id
                )
            ]
        )
    )
        .run();

    val helmet_asset_id = ft_assets.asset @ {} (.id, @omit @sort_desc .rowid) limit 1;

    originals_light_interfaces_ext.register_interface(
        "hero",
        [
            (
                attribute_name = "equipment",
                type = originals_light_attributes.attribute_type.asset_id
            )
        ]
    )
        .run();

    val interface_id = originals_light_interfaces.interface @ {.name == "hero"}.id;

    game_assets_external.set_current_version_of_hero_interface_id(interface_id).run();

    common_test_helpers.get_signed_test_nop_tx(
        admin,
        game_assets_external.register_and_mint_asset_hero(
            name = "hero_1",
            symbol = "HERO_1",
            decimals = 0,
            blockchain_rid = chain_context.blockchain_rid,
            icon_url = "https://example.com/hero_1.png",
            type = "ft4",
            attributes = [
                (
                    attribute_name = "equipment",
                    type = originals_light_attributes.attribute_type.asset_id,
                    attribute_value = helmet_asset_id
                )
            ]
        )
    )
        .run();

    val hero_asset_id = ft_assets.asset @ {} (.id, @omit @sort_desc .rowid) limit 1;
    val hero_children = originals_light_attributes_ext.get_linked_assets(hero_asset_id);

    assert_equals(hero_children, [helmet_asset_id, gem_asset_id]);

    val helmet_children = originals_light_attributes_ext.get_linked_assets(helmet_asset_id);

    assert_equals(helmet_children, [gem_asset_id]);
}