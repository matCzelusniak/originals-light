@extend(auth.auth_handler)
function () = auth.add_auth_handler(
  flags = []
);

operation nft(metadata: yours.token_metadata_incoming, token_id: integer) {
  val account = auth.authenticate();

  val token = yours.create_token_with_id(
    yours.token_info(
      project = metadata.yours.project,
      collection = metadata.yours.collection,
      name = metadata.name,
      modules = []
    ),
    token_id
  );

  create yours.imported_attributes ( token, json = metadata.properties );

  yours.attach_image(token, metadata.image);
  yours.attach_description(token, metadata.description);
  yours.attach_animation(token, metadata.animation_url);

  shared_module.attach(token);
  tracker.attach(token);

  yours.mint(token, yours.balance_info(account, amount = 1));
}

operation sft(metadata: yours.token_metadata_incoming) {
  auth.authenticate();

  val token = yours.create_token(
    yours.token_info(
      project = metadata.yours.project,
      collection = metadata.yours.collection,
      name = metadata.name,
      modules = []
    )
  );

  create tracker.tracker ( token, op_context.last_block_time );
  create yours.imported_attributes ( token, json = metadata.properties );

  yours.attach_image(token, metadata.image);
  yours.attach_description(token, metadata.description);
  yours.attach_animation(token, metadata.animation_url);

  shared_module.attach(token);
  tracker.attach(token);
}

operation mint(project: name, collection: name, token_id: integer, amount: integer) {
  val account = auth.authenticate();

  val token = require(yours.get_token(project, collection, token_id));
  yours.mint(token, yours.balance_info(account, amount = amount));
}
